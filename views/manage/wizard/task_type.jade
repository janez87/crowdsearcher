extends ./layout

include ../../includes/params

block append lateScripts
  script.

    var wizardTutorial = function( force ){
      force = force || false;

      var introConfiguration = {
        steps:[],
        showStepNumbers:false,
        scrollToElement:false,
        exitOnOverlayClick:false,
        showBullets:false
      };

      var wizardTutorial = true;
      var taskTypeTutorial = true;

      try{
        wizardTutorial = localStorage[ 'wizardTutorial' ]!=='true';
        taskTypeTutorial = localStorage[ 'taskTypeTutorial' ]!=='true';
      }catch(e){}


      if(wizardTutorial || force ){

        introConfiguration.steps= [
                {
                  intro: "Welcome to the CrowdSearcher tutorial!"
                },
                {
                  element: document.querySelector('#tutorial_task'),
                  intro: "Here you define the type of task to be performed"
                },{
                  element: document.querySelector('#tutorial_object'),
                  intro: "... then you define the objects of the task"
                },{
                  element: document.querySelector('#tutorial_execution'),
                  intro: "... then where you want to execute your task"
                },{
                  element: document.querySelector('#tutorial_invitation'),
                  intro: "... and how to invite the perfomer"
                },{
                  element: document.querySelector('#tutorial_review'),
                  intro: "... and finally you can review your task."
                }]

            localStorage[ 'wizardTutorial' ] = 'true';

      }

      if(taskTypeTutorial || force){

        introConfiguration.steps = introConfiguration.steps.concat(
              [{
                intro:'In this page you specify the type task you want to perform'
              },
              {
                element: document.querySelector('#tutorial_use_case_list'),
                intro: "First you choose the use case you want to solve:"
              },{
                element: document.querySelector('#tutorial_task_type'),
                intro: "Then the type of task:"
              },{
                element: document.querySelector('#tutorial_configuration'),
                intro: "Now you can configure the selected task type:",
                position:'top'
              },{
                element:document.querySelector('#tutorial_next'),
                intro:'Once done you can go to the next step.',
                position:'left'
              }
              ]
          );
          localStorage[ 'taskTypeTutorial' ] = 'true';
      }

      if(introConfiguration.steps.length > 0){
        introJs()
        .setOptions(introConfiguration)
        .onbeforechange( function( el ) {
          if( el.id==='tutorial_next')
            el.focus();
        } )
        .onafterchange( function( el ) {
          if( el.id==='tutorial_next') {
            var $field = $( '.task-type-config:visible input[data-name="name"]' );
            var str = $field.val() || '';
            str = str.trim();

            if( str.length===0 ) {
              this.previousStep();
              $field.focus();
              alert( 'You must insert the name for the task' );
            }
          }
        } )
        .start()
      }
    };

    $( window ).on( 'load', function() {
      wizardTutorial();
    } );






    $btnSend.click( function( evt ) {
      var $container = $( '.task-type-config:visible' );
      var name = $container.data( 'name' );
      var params = getParams( $container );

      saveData( {
        name: name,
        params: params
      } );

      return sendData.call( this, evt );
    } );

    function saveData( data ) {
      if ( data )
        $( '.wzData' ).val( JSON.stringify( data ) );
    }


    var $useCases = $( '.use-cases' );
    var $useCaseList = $( '.use-case' );
    var $taskTypes = $( '.task-type' );
    var $taskTypeConfigs = $( '.task-type-config' );

    function handleEnter() {
      var taskTypes = $( this ).data( 'taskTypes' );
      $taskTypes.hide();
      $( '#tt_'+taskTypes.join( ',#tt_' ) ).show();
    }
    function handleExit() {
      $taskTypes.hide();
    }

    $useCaseList.on( 'mouseenter', handleEnter );
    $useCases.on( 'mouseleave', handleExit );

    $useCaseList.on( 'click', function() {
      var $this = $( this );
      var wasActive = $this.hasClass( 'active' );

      $useCaseList.off( 'mouseenter' );
      $useCases.off( 'mouseleave' );

      $useCaseList.removeClass( 'active' );
      $taskTypes.removeClass( 'active' );
      $taskTypeConfigs.hide();

      $this.addClass( 'active' );
      if( wasActive ) {
        $useCaseList.on( 'mouseenter', handleEnter );
        $useCases.on( 'mouseleave', handleExit );
        $this.removeClass( 'active' );
      } else {
        handleEnter.call( this );
      }
    } );


    $taskTypes.on( 'click', function() {
      var $this = $( this );
      var id = $this.data( 'taskType' );
      $taskTypes.removeClass( 'active' );
      $this.addClass( 'active' );
      $taskTypeConfigs.hide();
      $( '#tt_'+id+'_config' ).show();
    } );

block append css
  style(type='text/css').
    .task-type {
      cursor: pointer;
      border: 1px solid #ccc;
      border-top: none;
      border-bottom-left-radius: 5px;
      border-bottom-right-radius: 5px;
      padding: 5px 10px;
    }
    .task-type:hover {
      background-color: #efefef;
    }
    .task-type.active {
      background-color: #ccc;
      border-color: #999;
    }
    .task-type.active:hover {
      background-color: #ddd;
    }
    .use-case {
      cursor: pointer;
      text-shadow: 1px 1px 3px #999;
    }
    .use-case.active {
      background-color: #ccc;
      border-color: #999;
    }
    .use-case:hover {
      background-color: #efefef;
    }
    .use-case.active:hover {
      background-color: #ddd;
    }
    img.media-object {
      width: 64px;
      height: 64px;
    }

block content
  //.well
    button.close(type='button',data-dismiss='well',aria-hidden='true') &times;
    strong Info:

  .row.selection
    .col-md-4
      h2#use_case Select the use-case
      ul#tutorial_use_case_list.list-group.use-cases
        for task_types, name in config.useCases
          li.list-group-item.use-case(data-use-case=name, data-task-types=task_types)= name
    .col-md-8
      h2#tutorial_task_types Task types

      div#tutorial_task_type
        for taskType in config.taskTypes
          .media.task-type(id='tt_'+taskType.id,
            data-task-type=taskType.id,
            style='display: none;')
            if taskType.image && taskType.image.length>0
              img.media-object.pull-left(alt=taskType.name,
                src=taskType.image)
            else
              img.media-object.pull-left(alt=taskType.name,
                src='http://placehold.it/64&text='+taskType.name.replace( / /g, '+' ) )
            .media-body
              h4.media-headding= taskType.name
              if taskType.description && taskType.description.length>0
                p!= md( taskType.description )
              else
                p.text-muted No description available

  hr
  #tutorial_configuration
    for taskType in config.taskTypes
      .row.task-type-config(
        id='tt_'+taskType.id+'_config',
        data-name=taskType.id,
        style='display: none;')
        .col-md-12
          h2 #{taskType.name} configuration
        .col-md-6
          h3 Parameters
          if _.size( taskType.params )>0
            +printParamsInput( taskType.params, 'tt_'+taskType.id )
          else
            p.text-muted No parameters to set.
        .col-md-6
          h3 Default values
          if _.size( taskType.defaults )>0
            +printParams( taskType.defaults )
          else
            p.text-muted No default values.
